package jdr.exia.update

import io.ktor.client.call.*
import io.ktor.client.plugins.*
import io.ktor.client.request.*
import io.ktor.client.statement.*
import io.ktor.http.*
import io.ktor.util.cio.*
import io.ktor.utils.io.*
import jdr.exia.OLEBO_VERSION_CODE
import jdr.exia.model.dao.option.Settings
import jdr.exia.service.SERVER_URL
import jdr.exia.service.client
import jdr.exia.system.OLEBO_DIRECTORY
import jdr.exia.system.OS
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.io.File

suspend fun checkForUpdate(releaseCode: Int? = null): Result<Release> {
    val response = try {
        client.use { it.get("${SERVER_URL}releases/" + (releaseCode ?: "last")).body<HttpResponse>() }
    } catch (e: Throwable) {
        return Result.failure(e)
    }

    if (response.status.isSuccess()) {
        return response.body<Release>().takeIf { it.versionId > OLEBO_VERSION_CODE }?.let { Result.success(it) }
            ?: Result.failure(Throwable())
    }

    return Result.failure(Throwable())
}

suspend fun getInstallerExecutable(versionCode: Int, onUpdateProgress: (Long) -> Unit): Result<File> {
    val fileToWrite = File("$OLEBO_DIRECTORY${File.separator}olebo_updater.exe")

    val os = OS.current

    val response = try {
        client.use {
            it.get("${SERVER_URL}releases/$versionCode/download") {
                parameter("os", os.name)
                onDownload { bytesSentTotal, contentLength ->
                    val percentage = (bytesSentTotal / contentLength) * 100
                    onUpdateProgress(percentage)
                }
            }
                .body<HttpResponse>()
        }
    } catch (e: Exception) {
        return Result.failure(e)
    }

    if (response.status.isSuccess()) {
        response.bodyAsChannel().copyAndClose(fileToWrite.writeChannel())
    } else return Result.failure(IllegalStateException("Response status : ${response.status.value}"))

    return Result.success(fileToWrite)
}

@Suppress("BlockingMethodInNonBlockingContext")
suspend fun downloadAndExit(
    versionCode: Int,
    onExitSuccess: () -> Unit,
    onProgressUpdate: (Long) -> Unit = {},
    onDownloadSuccess: () -> Unit = {},
    onDownloadFailure: (Throwable) -> Unit = {}
): Unit = withContext(Dispatchers.IO) {
    getInstallerExecutable(onUpdateProgress = onProgressUpdate, versionCode = versionCode).onSuccess {
        onDownloadSuccess()

        Settings.setWasJustUpdatedVersion(versionCode)

        // Run executable installer generated by Inno Setup
        Runtime.getRuntime().addShutdownHook(Thread {
            ProcessBuilder(it.absolutePath, "/SP-", "/silent", "/noicons").start()
        })

        onExitSuccess()
    }.onFailure(onDownloadFailure)
}