package jdr.exia.view

import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.material.LinearProgressIndicator
import androidx.compose.material.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.compose.ui.window.ApplicationScope
import androidx.compose.ui.window.Dialog
import androidx.compose.ui.window.rememberDialogState
import jdr.exia.localization.*
import jdr.exia.model.dao.option.Settings
import jdr.exia.update.Release
import jdr.exia.update.getInstallerExecutable
import jdr.exia.view.element.PromptDialog
import jdr.exia.view.element.builder.ContentButtonBuilder
import jdr.exia.view.tools.DefaultFunction
import kotlinx.coroutines.DelicateCoroutinesApi
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

@Composable
fun ApplicationScope.UpdateUI(release: Release) {
    PromptUpdate(release.versionId)
}

@Composable
private fun ApplicationScope.PromptUpdate(versionCode: Int) {
    var askForUpdateDialogIsVisible by remember { mutableStateOf(true) }
    var updateIsStarted by remember { mutableStateOf(false) }

    PromptDialog(
        visible = askForUpdateDialogIsVisible,
        onCloseRequest = { askForUpdateDialogIsVisible = false },
        title = StringLocale[STR_UPDATE_AVAILABLE],
        message = StringLocale[ST_NEW_VERSION_AVAILABLE],
        width = 600.dp,
        buttonBuilders = listOf(
            ContentButtonBuilder(content = StringLocale[STR_YES], onClick = {
                askForUpdateDialogIsVisible = false
                updateIsStarted = true
            }),
            ContentButtonBuilder(content = StringLocale[STR_NO], onClick = { askForUpdateDialogIsVisible = false }),
            ContentButtonBuilder(content = StringLocale[ST_NEVER_ASK_UPDATE], onClick = {
                Settings.updateWarn = versionCode.toString()
            })
        )
    )

    if (updateIsStarted) {
        InstallerDownloader(exitApplication = ::exitApplication)
    }
}

@OptIn(DelicateCoroutinesApi::class)
@Composable
private fun InstallerDownloader(exitApplication: DefaultFunction) {
    var isVisible by remember { mutableStateOf(true) }

    if (isVisible) {
        val dialogState = rememberDialogState(height = 150.dp)
        var progress by remember { mutableStateOf(0f) }

        Dialog(title = StringLocale[STR_DOWNLOAD_UPDATE], onCloseRequest = {}, resizable = false, state = dialogState) {
            this.window.isModal = true

            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                modifier = Modifier.fillMaxSize().padding(end = 10.dp)
            ) {
                val padding = Modifier.padding(horizontal = 10.dp)

                LinearProgressIndicator(modifier = Modifier.fillMaxWidth().then(padding), progress = progress)
                Text(StringLocale[STR_DOWNLOAD] + " $progress %", modifier = padding)
            }
        }

        LaunchedEffect(Unit) {
            launch(Dispatchers.IO) {
                getInstallerExecutable(onUpdateProgress = { progress = it.toFloat() }).onSuccess {
                    isVisible = false

                    Settings.wasJustUpdated = true

                    // Run executable installer generated by Inno Setup
                    Runtime.getRuntime().addShutdownHook(Thread {
                        ProcessBuilder(it.absolutePath, "/SP-", "/silent", "/noicons").start()
                    })

                    exitApplication()
                }
            }
        }
    }
}
