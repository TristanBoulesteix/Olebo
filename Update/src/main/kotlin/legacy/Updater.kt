package jdr.exia.update.legacy


import jdr.exia.system.OLEBO_DIRECTORY
import jdr.exia.system.OS
import jdr.exia.system.extension
import org.apache.http.HttpResponse
import org.apache.http.client.config.CookieSpecs
import org.apache.http.client.config.RequestConfig
import org.apache.http.client.methods.HttpGet
import org.apache.http.impl.client.HttpClients
import java.io.File

class Updater private constructor(private val assetsForOs: List<Asset>, val versionName: String) {
    internal companion object {
        operator fun invoke(release: Release?, os: OS) = when {
            release != null -> release.assets.filter { it.name.extension in os.executableFileTypes }
                .takeIf { it.isNotEmpty() }?.let { Updater(it, release.tag) }
            else -> null
        }
    }

    private val downloadClient
        get() = HttpClients.custom()
            .setDefaultRequestConfig(RequestConfig.custom().setCookieSpec(CookieSpecs.STANDARD).build())
            .build()

    fun startUpdate(checkUpdateAllowed: () -> Boolean) {
        val asset = assetsForOs.firstOrNull()

        if (asset != null)
            Runtime.getRuntime().addShutdownHook(Thread {
                if (checkUpdateAllowed()) {
                    downloadClient.use {
                        val request = HttpGet(asset.url)
                        it.execute(request).use { response: HttpResponse ->
                            response.entity.content
                        }
                    }.use { inputStream ->
                        val installer =
                            File("$OLEBO_DIRECTORY${File.separator}installer.${asset.name.extension ?: "exe"}")

                        installer.outputStream().use { outputStream ->
                            inputStream.copyTo(outputStream)
                        }

                        // Run executable installer generated by Inno Setup
                        ProcessBuilder(installer.absolutePath, "/SP-", "/silent", "/noicons").start()
                    }
                }
            })
    }
}